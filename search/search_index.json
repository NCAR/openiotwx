{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contribution/","title":"Contributing to this Project","text":"<p>We welcome any and all contributions. We'd love not only to see pictures of your builds and the data that you produce (if you're willing to share), but also support for new sensors, new 3d designs for  parts, and any feedback you have.</p> <p>This google form is the best way to contribute non-code items.  For code, stls, etc. please send pull requests for this repo(LINK,LINK,LINK)</p> <p>Pieces we would love for you to contribute:</p> <ul> <li>A housing and sensor system for measuring atmospheric pollutants</li> <li>A low cost and low complexity method for getting anemometry</li> <li>Water quality / PFAS sensor integration</li> </ul>"},{"location":"data_management/","title":"Data Management and CHORDS","text":"<p>There are many ways you can approach collecting, visualizing, analyzing, and utilizing, the data from your station/s. Because Open IoTwx relies on an MQTT protocol, it must send its data to a broker.</p> <p>Each station is, in the IoT view, a client. Whatever platform you choose to interact with the data from  your station on is also a client. To go between clients, a broker is required. In our opinion,   CHORDS, is your best option for  doing that. CHORDS serves as the broker, essentially an intersection that your data gets sent to and  away from, as well as, if you want, the client. CHORDS allows for data visualization, download (in many   formats), and more. Your data can be sent to the Open IoTwx client, and be published with the other  open-data stations, or put onto your own server, where you have complete autonomy over the data  that you collect. It is completely your choice.</p> <p>Follow the steps on CHORDS if you wish to use it as a service. Their documentation is quite   user-friendly.</p> <p>While Open IoTwx is in favor of public data, in the same way we believe in open software and   knowledge in general, we understand that many communities have had data systematically   used against them, and thus want control over it. Any Open IoTwx users (you) should feel no obligation  to share data unless they want to.</p>"},{"location":"guide/","title":"How to follow these instructions","text":"<p>We, the Open IoTwx team, have worked to make the documentation for making your own station as friendly as possible. That being said, this project does require some care and effort, so we thought  we'd include something of a step-by-step for you to refer to in case you find yourself a little lost.</p> <ol> <li>Give this documentation a quick read-through. See what this project entails and what you need to learn or already know.</li> <li>Make a plan. Figure out what 3d printer you'll buy/use, which sensors you want to attach, etc.</li> <li>Download all the needed software. It's always good to make sure your computer can do what you need. </li> <li>Get your materials.  Buy the items you need so you can streamline the process when parts arrive.</li> <li>Start printing. This step takes the most time so it's good to get the printer running early.</li> <li>Flash your microcontroller.  This step may seem confusing but just follow the page carefully and it'll start making sense.</li> <li>Setup your modem (if necessary for your configuration) according to manufacturers instructions.  Often this just means activating your sim card on the company website and plugging it into the usb  modem.</li> <li>Test your sensors. Make sure everything is working before you put it into  the 3d-printed assembly.</li> <li>Assemble your station. Put all the pieces together and give it a quick test  before putting it in the field.</li> <li>Deploy your station. Follow the steps for choosing a proper site and  put your new weather station out in the field.</li> </ol>"},{"location":"print/","title":"Printing out the station","text":"<p>Attached in this document are all of the .stl (3d printing files) and .step (3d design files) for every node. </p> <p>While we didn't feel it made sense to share gcodes for the various printing operations, here are some thoughts for settings: 1. Stay fairly near manufacturers suggestions for temps unless you are a seasoned 3-d printer. 2. Lower support densities and/or use tree supports to save material, limit post-processing, and increase print quality. 3. Print multiple parts at once. It saves time. 4. Print the cap and lid lock for air quality sideways, it'll increase quality significantly.</p>"},{"location":"print/#base-unit","title":"Base Unit","text":""},{"location":"print/#housing-options","title":"Housing options","text":"<p>Dome Housing: stl,  step</p> <p>Large Housing:  stl,  step </p> <p>Lid for Large Housing:  stl,  step</p>"},{"location":"print/#base-attachments","title":"Base attachments","text":"<p>Rain gauge:  stl,  step</p> <p>UV tube:  stl  Step</p> <p>UV cap: stl  Step</p> <p>Radiation shield: stl link, step link</p> <p>Air quality body:  stl,  step, </p> <p>Air quality lid:  stl,  step, </p>"},{"location":"print/#auxiliary-units","title":"Auxiliary units","text":"<p>Camera: stl link, step link, gcode link</p> <p>Lidar: stl link, step link, gcode link</p> <p>Anemometer: stl link, step link, gcode link</p>"},{"location":"welcome/","title":"Title","text":""},{"location":"assemble/accessory_assemble/","title":"Assembly and Attachment of other sensors/nodes","text":"<p>Assembly for anemometer</p> <p>Assembly for camera</p> <p>Assembly for UV</p> <p>Assembly for AQI</p> <p>Assembly for Lidar</p>"},{"location":"assemble/connection/","title":"Power and Internet connection","text":""},{"location":"assemble/connection/#power-options","title":"Power Options","text":"<p>To power your device, you have two primary options - a solar panel and battery or Power over Ethernet (PoE).</p> <p>For a solar panel and battery, we are fans of Voltaic because of their fairly high quality to price.  That being said, there are many companies out there and if you can find a good deal, take it. The power source is only critical insofar as it exists, and the specific method shouldn't change anything.</p> <p>For PoE we suggest integrating via an m5 microcontroller integration. What PoE does is both data transfer as well as internet, so it covers both realms.</p>"},{"location":"assemble/connection/#internet-options","title":"Internet Options","text":"<p>The methodology we have developed for remote stations is threefold.</p> <p>If there is service via a cellular network i.e T-mobile, Verizon, AT&amp;T, etc.  purchase a sim card with a long lifespan and a relatively small amount of data (we use 200mb for a year). Additionally purchase a USB modem. With these two options you can run a miniaturized wireless network that integrates perfectly with the ESP32 microcontroller and data protocol.</p> <p>If there isn't cell service, you can either store data locally and retrieve it - cheaper and more time-consuming - or set up a satellite network  - significantly more expensive but easier.</p>"},{"location":"assemble/connection/#note","title":"Note","text":"<p>All of these options are listed within materials for you to choose what works best for you. If you choose PoE there are a few changes to the config.json - noted in the installation section.</p>"},{"location":"assemble/core/","title":"Assembling the Main Unit","text":"<p>Once you have made sure that the sensors are all functional and uploading data, assemble the station.</p> <ol> <li>Attach housing lid to housing body, placing microcontroller inside</li> <li>Run power cable to outside the housing for deployment ease.</li> <li>Attach radiation shield with the BME680 atmospheric sensor housed inside</li> <li>Attach UV sensor and house inside UV assembly</li> <li>Attach and connect Rain gauge (WIRING)</li> </ol> <p>All other sensors are covered in Accessory Assembly</p>"},{"location":"assemble/testing/","title":"Testing your Station before deployment","text":"<p>Before you place all of your sensors into their various housing, it is important to test whether or not you are receiving data.</p> <p>Here are the steps to do that most effectively:</p> <ol> <li>Configure your wifi modem (if you are using a sim card setup)</li> <li>Plug the modem into your power source and check whether or not you have a signal.</li> <li>Unplug the modem and plug in your microcontroller, without any sensors attached. When connected to power, but not to sensors, it will blink red. </li> <li>Unplug the microcontroller from the power source and attach your cables. Make sure all Grove and Qwiic connectors are properly pushed into place as this can cause issues down the line.</li> <li>Without plugging in the modem, connect your microcontroller, with sensors attached, to the power source. If it flashes blue, you're clear to proceed.</li> <li>Unplug the microcontroller, plug in the modem, wait a few seconds for your modem to connect, and plug in your microcontroller.</li> <li>Wait a few minutes and then check your data portal to see if you are receiving data. If so, you are good assemble the station.</li> </ol>"},{"location":"deploying/accessory_deploy/","title":"Accessory deployment","text":"<p>Deploying the other sensors. mostly just attach to main unit and do a standard deployment</p>"},{"location":"deploying/core_deploy/","title":"Core deployment","text":""},{"location":"deploying/core_deploy/#field-deployment","title":"Field Deployment","text":"<p>Properly situating a weather station in the field requires careful consideration for accurate data collection. When selecting a location, keep in mind a few important factors. Place the weather station away from obstacles like tall trees or buildings that can disrupt airflow and affect wind measurements. Avoid areas with artificial heat sources such as asphalt or concrete, as they can cause higher temperature readings. Also, make sure to position the station on stable ground to prevent measurement errors and ensure equipment stability. Mount the station at a suitable height, typically 1.5 to 2 meters above the ground, for reliable data.</p>"},{"location":"deploying/core_deploy/#home-urban-or-school-deployment","title":"Home, Urban, or School Deployment","text":"<p>When deploying a weather station at a home, school, or in an otherwise developed area, there are a few important considerations to keep in mind. Firstly, choose a location that is free from immediate obstructions such as nearby trees or tall structures that could affect other weather measurements. Ensure that the station is not in direct contact with the building or any heat-emitting sources that could impact temperature readings. It is recommended to position the weather station in an area that receives adequate sunlight and is representative of the general microclimate of your surroundings. Avoid placing the station in shaded areas or near reflective surfaces that could distort solar radiation measurements. Additionally, make sure the station is securely mounted, taking into account factors like stability and ease of access for maintenance. Regular checks and comparisons with nearby official weather sources can help ensure the accuracy of the collected data.</p>"},{"location":"deploying/field_deployment/","title":"Field Deployment","text":"<p>Properly situating a weather station in the field requires careful consideration for accurate data collection. When selecting a location, keep in mind a few important factors. Place the weather station away from obstacles like tall trees or buildings that can disrupt airflow and affect wind measurements. Avoid areas with artificial heat sources such as asphalt or concrete, as they can cause higher temperature readings. Also, make sure to position the station on stable ground to prevent measurement errors and ensure equipment stability. Mount the station at a suitable height, typically 1.5 to 2 meters above the ground, for reliable data.</p>"},{"location":"deploying/home_deployment/","title":"Urban Deployment","text":"<p>When deploying a weather station at a home, school, or in an otherwise developed area, there are a few important considerations to keep in mind. Firstly, choose a location that is free from immediate obstructions such as nearby trees or tall structures that could affect other weather measurements. Ensure that the station is not in direct contact with the building or any heat-emitting sources that could impact temperature readings. It is recommended to position the weather station in an area that receives adequate sunlight and is representative of the general microclimate of your surroundings. Avoid placing the station in shaded areas or near reflective surfaces that could distort solar radiation measurements. Additionally, make sure the station is securely mounted, taking into account factors like stability and ease of access for maintenance. Regular checks and comparisons with nearby official weather sources can help ensure the accuracy of the collected data.</p>"},{"location":"first-steps/introduction/","title":"Introduction","text":"<p>Aliquip amet laboris occaecat fugiat minim Lorem occaecat laboris pariatur anim officia. Laborum pariatur ad deserunt ad aute aliquip ullamco mollit adipisicing non mollit. Id et tempor et ad non officia et veniam. Culpa quis magna eu ex labore excepteur elit quis. Magna id nulla ullamco laborum eu cupidatat aliquip.</p>"},{"location":"getting-started/computing/","title":"Computing","text":"<p>A driving principle of OpenIoTwx is accessibility. Because of this we have kept requirements low. Required: Operating computer (because of our love for open source software, we suggest Linux, Mac and Windows work as well), a monitor, a keyboard, and a mouse. Additionally, for the preliminary downloads, applications, etc, you will need a moderately stable internet connection OR a flashdrive containing everything within the software  and the core installation pages.</p>"},{"location":"getting-started/materials/","title":"Materials","text":"<p>Within this page you can see all of the required materials for building the base unit, as  well as the materials for adding sensors and other 'accessory' nodes. If you already have some of  these pieces, for example, a 3d printer, you don't need to factor that into the cost. We have  included every sensor that we currently support for the station within this list. If you have other  sensors you wish to include, we would be thrilled for you to modify the codebase and send us a pull request  or send a comment to us via our Contribution portal.</p> <p>Embed the excel sheet.!!!</p>"},{"location":"getting-started/software/","title":"Software","text":"<p>First, download Arduino 1.8.18. This is an old release but in order to use the correct data  format, SPIFFS, you must use Arduino 1.8. If this is changed in Arduino IDE,  IoTWX will adapt accordingly.</p> <p>Additionally you will need Ultimaker Cura (or a different 3d printing software) if you want to work with and edit the 3d files. You will need to do this if you have special circumstances for  your station site or you are using a different prrinter than the one we suggest. Our gcode files  (instructions for the 3d printing) are calibrated with our printer, the Ender 3 S1.</p>"},{"location":"getting-started/software/#download-pages","title":"Download pages:","text":"<p>Arduino IDE (Scroll down until 'Legacy IDE')</p> <p>Ultimaker Cura</p>"},{"location":"installation/code/","title":"Arduino Code","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"installation/connection/","title":"Setting up Internet and Power","text":"<p>Thumbdrive internet Ethernet</p> <p>Battery+ SP POE</p>"},{"location":"installation/core_install/","title":"Flashing Microcontrollers","text":"<p>Each station node is build with a microcontroller as its brain. Each microcontroller is connected to one or more sensors either directly or by hubs -- Grove hubs or Qwiic hubs. </p> <p>IotWx is designed to be used with the m5Stack Atom Lite ESP32-Pico based microcontroller, but it is possible to connect other microcontroller devices with a few modifications to the code. Technically any ESP32 chip with enough memory would work. That being said, the M5 atom lite is quite cheap and easy to purchase, and we thus suggest that one.</p>"},{"location":"installation/core_install/#iotwx-library-installation","title":"IoTwx library installation","text":"<p>Before compiling the microcode onto the Arduino, you will also need to install the IoTwx library which controls the communications and initialization functions of the station.</p> <p>IoTwx Library</p> <p>The library can found at the following repository. It should be installed in your <code>Arduino/libraries</code> directory and once installed, you may use it by the <code>#include \"IoTwx.h\"</code> directive.</p> <ul> <li>https://github.com/NCAR/esp32-atomlite-arduino-iotwx</li> </ul>"},{"location":"installation/core_install/#preparing-your-system","title":"Preparing Your System","text":"<p>First, download Arduino 1.8 - this is an old release but in order to use the correct data format, SPIFFS, you must use Arduino 1.8. Download Arduino 1.8.19 following this link. If this is changed in Arduino IDE, IoTWX will adapt accordingly. </p> <p>There are a few other steps you will need to complete:</p> <p>Next, download the following packages. The easiest way to do this is to follow the github links and click download as zip.  From there, in the \u2018manage libraries\u2019 functionality of Arduino, you can add a library from a .ZIP. Do this with all packages that aren't native in the Arduino IDE library set.</p> <ul> <li>install the required ESP32 Pico / M5 Stack Atom lite boards; a comprehensive instruction set is here</li> <li>install the arduino-esp32fs-plugin that will allow SPIFFS file uploads to ESP32 boards</li> <li>install the following libraries through the Arduino IDE or through the zip link:<ul> <li>MQTT library from 256dpi https://github.com/256dpi/arduino-mqtt</li> <li>ArduinoJson library https://github.com/bblanchon/ArduinoJson</li> <li>FastLED library https://github.com/FastLED/FastLED</li> <li>NTPClient library https://github.com/arduino-libraries/NTPClient</li> <li>Adafruit BME680 https://github.com/adafruit/Adafruit_BME680</li> <li>Adafruit LTR390 https://github.com/adafruit/Adafruit_LTR390</li> <li>RG-15 Rain Gauge https://rainsensors.com/docs/rg-guides/rg-arduino/hydreon-arduino-library/</li> <li>ESP Software Serial https://github.com/plerup/espsoftwareserial</li> </ul> </li> </ul> <p>If ESP32 isn't downloaded underneath the board manager, download it.  Once ESP32 is downloaded, select it within board manager and use version WHAT VERSION When selecting what board to use, under ESP32 Arduino choose ESP32 Dev Module</p> <p>This will add a number of options underneath your tools section. Select:</p> <ul> <li>Upload speed 115200</li> <li>CPU Frequency: 240</li> <li>Flash Frequency:80</li> <li>Flash mode: QIO</li> <li>Flash size: 4 MB</li> <li>Partition scheme: Huge APP</li> <li>PSram: disabled</li> </ul> <p>Leave the rest as default if that setting was not already the default mode</p>"},{"location":"installation/core_install/#cloning-the-file-structure","title":"Cloning the file structure","text":"<p>Next, clone the github REPO (LINK,LINK,LINK) into Arduino.  Alternatively, click this link and download the zip of the file structure.  There should be code, a data directory, and within the data directory, a config.json</p>"},{"location":"installation/core_install/#editing-configuration-files","title":"Editing Configuration Files","text":"<p>Your microcontroller must contain a configuration file to operate.  The file contains information about WiFi connections, MQTT (the way your station will send data) connections and some other relevant information.</p> <p>The microntroller uses an ESP32 SPIFFS filesystem to store the configuration.  In the folder that you will flash onto your mictrocontroller, you will find a <code>/data</code> folder which contains a <code>config.json</code> file.</p>"},{"location":"installation/core_install/#understanding-the-configjson-file","title":"Understanding the <code>config.json</code> file","text":"<p>The typical config file  looks like this:</p> <pre><code>{    \"iotwx_local_config\":\"1\",\n\"iotwx_id\":\"m5atom/esp32/aaffbbcc\",\n\"iotwx_mq_ip\":\"\",\n\"iotwx_mq_port\":\"1883\",\n\"iotwx_publish_interval\":\"1\",\n\"iotwx_reset_interval\":\"360\",\n\"iotwx_sensor\":\"grove/i2c\",\n\"iotwx_timezone\":\"21600\",\n\"iotwx_wifi_pwd\":\"\",\n\"iotwx_wifi_ssid\":\"\",\n\"iotwx_topic\":\"measurements/iotwx\",\n\"iotwx_max_frequency\":\"240\"\n}\n</code></pre> <p>The details of each key are described below.</p> key value / description <code>iotwx_local_config</code> always set to \"1\" <code>iotwx_id</code> contains a unique identifier for you station as a whole -- that is to say, if you have multiple nodes on the same physical station, they would share the same <code>iotwx_id</code>.  This identifier is also used in the data portal. (e.g. <code>\"iotwx-co-bb83\"</code>) <code>iotwx_mq_ip</code> the ip address (e.g. <code>\"172.88.0.13\"</code>) of the MQTT broker you will be using.  At the moment only one such broker is allowed. You may use the FQDN (<code>\"mymqttsite.wx\"</code>) but the IP address uses less power by reducing the time WiFi is on to do DNS lookups. <code>iotwx_mq_port</code> the port number of the broker, which is typically <code>\"1883\"</code> for non-SSL and <code>\"8883\"</code> for SSL. <code>iotwx_publish_interval</code> the interval you wish your station to transmit in minutes.  Note this is relevant primarily for the Atmos node which continuously transmits at the specified interval. Hydro and Aero nodes only transmit when there is data to transmit. <code>iotwx_reset_interval</code> the number of minutes between system resets.  The nodes are designed to reset every 6 hours or twice daily.  Reset is instantaneous and the system is restored to full functionality in 90 seconds after the Bluetooth acquisition phase. (e.g. <code>\"1\"</code> for 1 minute) <code>iotwx_sensor</code> the sensor string for the node and may vary based on the node.  Typically do not change this value from what is contained in the default for your node. <code>iotwx_timezone</code> the GMT offset in seconds of the station timezone. (e.g. <code>\"21600\"</code>) <code>iotwx_wifi_pwd</code> and <code>iotwx_wifi_ssid</code> are the corresponding wifi password and ssid of the network your node will connect to.  Note, it is not necessary (but would be unusual) for all nodes to connect to the same WiFi network. (e.g. <code>\"your_wifi\"</code> and <code>\"your_password\"</code>) <code>iotwx_topic</code> the MQTT topic your node will publish to.  It is not necessary for all nodes to publish to the same topic, but if you are using the CHORDS MQTT Orchestrator (GitHub - NCAR/chords-mqtt-orchestrator), then you will need to adjust it accordingly to route your messages where they belong.  The current default is <code>\"iotwx/net\"</code>. <code>iotwx_max_frequency</code> is the CPU frequency (in Mhz) you wish your node to run  on.  The m5Stack Atom Lite can be run at frequencies up to 240, but has only been tested down 40 Mhz. Varying the value has power-saving benefits, where we have seen 20-50% reduction in power consumption of a node."},{"location":"installation/core_install/#flashing-onto-the-microcontroller","title":"Flashing onto the microcontroller","text":"<p>Once you have everything set up within Arduino IDE, compile everything you just did. If that works with no errors, plug the microcontroller into your computer, and flash onto it. Additionally, make sure to do an ESP32 Sketch Data Upload (under Tools). This will upload your config.json. You don't need to reflash the whole microcontroller if you need to update the config, just redo this step.</p>"},{"location":"installation/core_install/#configuring-data-upload","title":"Configuring data upload","text":"<p>While this isn't necessarily under the direct purview of openIoTwx, and is more covered by whatever orchestrator and other clients you decide to use, it is worth noting that your topic in the config needs to then be matched and set up within your orchestrator and then in your data collection / visualization client (CHORDS for us).</p>"},{"location":"installation/preliminaries/","title":"Atmos Node","text":"<p>Phasellus posuere in sem ut cursus</p>"},{"location":"installation/preliminaries/#radiation-shield","title":"Radiation Shield","text":"<ul> <li>the code to flash the node can be found in the   esp32-atomlite-arduino-atmos-node repository.   You will to follow the instructions there to understand the Arduino   flashing requirements and procedures.</li> </ul>"},{"location":"introduction/community/","title":"Community","text":"<p>openIoTwx is made up of a diverse community, all contributing to build,  customize, and deploy weather stations. A core belief of ours is that these stations should be accessible for all researchers no matter the size of the institution,  the scale of the planned work, the discipline of the research, or the  background of the user. </p> <p>All are welcome to help with this project, no degree in computer science or engineering needed. Our community includes  students, faculty, and staff from community colleges and universities, citizen  scientists, and other interested community members.</p> <p>Historically, the same communities that aren\u2019t represented in climate and  geosciences are the ones that are least resilient and most at risk of  significant impact from climate change. </p> <p>Furthermore, such communities are often over-represented when looking at  so-called \"data deserts\" and gaps in observation networks. These communities  are at continued risk of the worst outcomes of climate change, and communities  in data deserts are often under-represented in climate change science and  policy discussions, STEM fields, and in the ongoing open source IoT revolution. Our community will contribute to the development of a democratized, diverse,  and globally competitive STEM workforce, providing opportunities to immediately translate interest into climate change resiliency, data analysis and policy management.</p>"},{"location":"introduction/ideals/","title":"Ideals","text":"<p>The \"Internet of Things\" (IoT) revolution is about the world of sensors, software, and electronics. It allows for ubiquitous, low-cost, and high quality measurements of many things, including our Earth system. Due to low cost-barriers, these sensing systems are now broadly accessible to many communities. We hope that openIoTwx can continue piquing new interest in measurements and data relating to the all aspects of our environment around us. We advise all members of our community to review and regularly reflect on the core ideals outlined here.</p> <p>The goals and core ideals of the openIoTwx project is to advance low cost IoT based geoscience observational projects via four objectives that align with and build upon the National Science Foundation's (NSF) investments in the EarthCube Community, ACCESS/Jetstream, 3D printed weather stations (aka \"openIoTWx\") and future needs:</p> <p>(1) create an open, diverse, community-driven and community-managed ecosystem to empower fledgling open source sensor projects for open environmental sensing.</p> <p>(2) implement an efficient, scalable, and simplified open project submission and contribution framework to provide equitable access across disciplines, stakeholders, institutions, and demographics to grow a community managed suite of open source IoT observational sensor network projects;</p> <p>(3) building upon NSF\u2019s Cloud-Hosted Real-time Data Services for the Geosciences (CHORDS) and other components, develop a robust, decentralized, and flexible community software contribution platform to bring the open source project development and design cycle into a new collaborative and cooperative environment to spur sustainable community growth; </p> <p>(4) provide cyber-infrastructure (CI) integration through the ACCESS innovation pilot program to manage dataflows, analysis, address artificial intelligence and machine learning of earth science time series streams, creating open source community deployments that are accessible while recognizing and honoring data sovereignty aspects of our communities.</p>"},{"location":"introduction/ideals/#opensource-is-at-our-core","title":"Opensource is at our core","text":"<p>Our community holds the ideals of open source technology very close (for more see https://opensource.org). openIoTwx broadly promotes the MIT open source license and is accessible to all for non-commercial use. Open source is an important ideal for our community because it facilitates community engagement, provides transparency that builds trust and encourages sharing of data, code, hardware  community earth system science data and ideas.</p>"},{"location":"introduction/ideals/#fair-and-care","title":"FAIR and CARE","text":"<p>We are committed to the Findability, Accessibility, Interoperability, and Reuse (FAIR) of all digital assets (see https://www.go-fair.org/fair-principles/) needed to design, modify, build, deploy, analyze and archive the openIoTwx station. The FAIR principle as defined by GO-FAIR.ORG is a core value that will help make this community open and accessible to all.</p> <p>We balance adherence to FAIR principles with CARE (https://www.gida-global.org/care) or Collective Benefit, Authority to Control, Responsibility, and Ethics. This is important for our community members from tribal communities and other marginalized groups. Please review the CARE principle summary as linked above.</p>"},{"location":"introduction/ideals/#fpic","title":"FPIC","text":"<p>Free Prior and Informed Consent (FPIC) is a specific right that pertains to indigenous peoples and is recognised in the United Nations Declaration on the Rights of Indigenous Peoples (UNDRIP). It allows them to give or withhold consent to a project that may affect them or their territories. This is another core ideal of the openIoTwx community and should also be reviewed. (for more see https://www.fao.org/indigenous-peoples/our-pillars/fpic/en/)</p>"},{"location":"introduction/platform/","title":"Platform","text":"<p>openIoTwx is an open source community committed to increasing access to weather observation hardware, software, and data. This is achieved through our portable,  modular, and affordable platform. openIoTwx can be installed with up to 7  sensors or \"nodes.\" These nodes include, but are not limited to: temperature, relative  humidity, pressure, volatile organic compounds (VOCs), digital rain sensors, sky  cameras, and sonic anemometers (Devices that measure wind speed). The platform is  small enough to mount anywhere using low cost commercial off-the-shelf materials and  3D printed parts.</p> <p>Any of these nodes can be attached to the body using universal one inch screw-in  connectors. This approach allows for any 1\" PVC pipe or other threaded connector to be  used as a base for the station. This specification was chosen due to how commonly  available it is to find components that fit. The body of the station has threaded  connectors. Depending on the housing used, there are between three and five ports. </p> <p>Users are provided with a starter set of screw in adaptors for an initial  set of sensors such as the RG15 digital rain sensor,  air quality monitor, and radiation shields. We also provide screw-in connectors with a  cap so that users can cap off connectors not in use and deploy. This prevents water and  dust from getting into the electronics. Should a user want to attach a new sensor, they  can modify the 3D design files (provided in the print section) for whatever their  needs demand.</p>"}]}