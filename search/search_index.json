{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contribution/","title":"Contributing to this Project","text":"<p>We welcome any and all contributions. We'd love not only to see pictures of your builds and the data that you produce (if you're willing to share), but also support for new sensors, new 3d designs for  parts, and any feedback you have.</p> <p>This google form is the best way to contribute non-code items. </p> <p>If you want to look further into this project, visit our various github repositories.</p> <ul> <li>For general issues and contributions go here</li> <li>For print issues and contribution go here</li> <li>For suggestions about this site go here</li> <li>For issues and contributions to the flash code go here</li> <li>For issues and contributions to the library code go here</li> </ul> <p>Pieces we would love for you to contribute:</p> <ul> <li>A housing and sensor system for measuring atmospheric pollutants</li> <li>A low cost and low complexity method for getting anemometry</li> <li>Water quality / PFAS sensor integration</li> </ul>"},{"location":"data_management/","title":"Data Management and CHORDS","text":"<p>There are many ways you can approach collecting, visualizing, analyzing, and utilizing, the data from your station/s. Because Open IoTwx relies on an MQTT protocol, it must send its data to a broker.</p> <p>Each station is, in the IoT view, a client. Whatever platform you choose to interact with the data from  your station on is also a client. To go between clients, a broker is required. In our opinion,   CHORDS, is your best option for  doing that. CHORDS serves as the broker, essentially an intersection that your data gets sent to and  away from, as well as, if you want, the client. CHORDS allows for data visualization, download (in many   formats), and more. Your data can be sent to the Open IoTwx client, and be published with the other  open-data stations, or put onto your own server, where you have complete autonomy over the data  that you collect. It is completely your choice.</p> <p>Follow the steps on CHORDS if you wish to use it as a service. Their documentation is quite   user-friendly.</p> <p>While Open IoTwx is in favor of public data, in the same way we believe in open software and   knowledge in general, we understand that many communities have had data systematically   used against them, and thus want control over it. Any Open IoTwx users (you) should feel no obligation  to share data unless they want to.</p>"},{"location":"guide/","title":"How to follow these instructions","text":"<p>We, the Open IoTwx team, have worked to make the documentation for making your own station as friendly as possible. That being said, this project does require some care and effort, so we thought  we'd include something of a step-by-step for you to refer to in case you find yourself a little lost.</p> <ol> <li>Give this documentation a quick read-through. See what this project entails and what you need to learn or already know.</li> <li>Make a plan. Figure out what 3d printer you'll buy/use, which sensors you want to attach, etc.</li> <li>Download all the needed software. It's always good to make sure your computer can do what you need. </li> <li>Get your materials.  Buy the items you need so you can streamline the process when parts arrive.</li> <li>Start printing. This step takes the most time so it's good to get the printer running early.</li> <li>Flash your microcontroller.  This step may seem confusing but just follow the page carefully and it'll start making sense.</li> <li>Setup your modem (if necessary for your configuration) according to manufacturers instructions.  Often this just means activating your sim card on the company website and plugging it into the usb  modem.</li> <li>Test your sensors. Make sure everything is working before you put it into  the 3d-printed assembly.</li> <li>Assemble your station. Put all the pieces together and give it a quick test  before putting it in the field.</li> <li>Deploy your station. Follow the steps for choosing a proper site and  put your new weather station out in the field.</li> </ol>"},{"location":"print/","title":"Printing out the station","text":"<p>Attached in this document are all of the .stl (3d printing files) for the various housing components.</p> <p>While we didn't feel it made sense to share gcodes for the various printing operations, here are some thoughts for settings:</p> <ol> <li>Stay fairly near manufacturers' suggestions for bed and nozzle temperatures unless you are a seasoned 3D printer.</li> <li>Lower support densities and/or use tree supports to save material, limit post-processing, and increase print quality.</li> <li>Print multiple parts at once. It saves time.</li> <li>Print the cap and lid lock for air quality sideways, it'll increase quality significantly.</li> <li>Print the orb housing with tree supports so that the top threading forms correctly.</li> </ol>"},{"location":"print/#base-unit","title":"Base Unit","text":"Name Image STL File Notes Orb Housing Orb Housing STL File This is the base of the weather station, where the microcontroller and most wires will go.  You can also find the full suite of STL files which include 3.8\" and 4.5\" orbs here: https://github.com/NCAR/openiotwx-stl/tree/main/housing."},{"location":"print/#base-attachments","title":"Base Attachments","text":"Name Image STL File Notes Rain Gauge Rain Gauge STL File This will replace the manufacturers rain gauge base so the gauge can screw into the orb housing. UV Tube UV tube STL File This will screw into the UV Cap to hold the UV sensor in place and allow it to fit into PVC housing. UV Cap UV Cap STL File The UV sensor will sit inside the fitted corners of this cap and be held in place by the UV tube. Radiation Shield Radiation Shield STL File The bottom opening of this shield is threaded so another part can be screwed into it. In a simple station this would likely mean the vented cap (see key accessories). Air Quality Body Air quality lid lock STL File Be sure the gap on the rim of this part faces downward during assembly so water cannot get into the sensor. Air Quality Cap Air quality lid lock STL File Be sure the vented openings face downwards during assembly so water cannot get into the sensor."},{"location":"print/#key-accessories","title":"Key Accessories","text":"Name Image STL File Notes Closed Cap Closed cap STL File This can close off any unused openings in the orb housing. Open Cap Open cap STL File This allows passage of external wiring into the orb housing. PVC Adapter Threading to PVC adapter STL File This allows the orb housing to be attached to PVC pipe, which can help with running wires and field set up. Vented Cap Vented Cap STL File This is helpful for anywhere that may overheat, especially the opening at the bottom of the radiation shield. <p>Note: Not all key accessories may be necessary for your weather station and you may need more than one of some accessories. This will depend of your specific weather station design.</p>"},{"location":"welcome/","title":"Title","text":""},{"location":"assemble/core/","title":"Assembling the Main Unit","text":"<p>At this point you should have confirmed your sensors, wiring, microcontroller, connection, and power source are functional. Now we will disconnect the wiring we put together for testing so that we may get each component into its housing, then fit all the housing together.</p> <p>The instructions on this page are to assemble a basic model of the IoT weather station with four sensors: rain gauge, air quality, temperature/pressure/humidity, and UV. We encourage you to explore and iterate on this design once you understand the principle structure. If you would like to add more sensors, any Qwiic compatible, I2C, sensors can be daisy-chained or connected to another splitter if needed.</p>"},{"location":"assemble/core/#housing-assembly","title":"Housing Assembly","text":"<ol> <li> <p>Hydreon RG15 Rain Sensor</p> Parts Rain gauge wired with GPIO to Grove cableScrews from original rain gauge base 3D printed rain gauge mount Screwdriver Instructions Image Detach the rain gauge from the microcontroller by pinching down on the white tab (open the alligator mouth) and pulling it off. Insert the cords through the center of the rain gauge base and align the base with the four screw holes in the board. Reattach the housing with the screws you removed from the manufacturer's base. Note: it is not required to keep the silica packet in. The purpose of the packet is to absorp water that may get into the sensor. </li> <li> <p>Air Quality Sensor Housing</p> Parts AQ Sensor wired with 200mm qwiic wire AQ Base AQ vented cap Instructions Image Unplug the air quality sensor from the Qwiic connector, but leave the cord connected to the sensor. Find the fan on the sensor (looks like a small black box). Feed the air quality wiring through the vented base and make sure the fan is facing towards the bottom of the housing (Look for the gap/lip at the bottom of the vented lid). Twist on the vented lid. You should be able to see the fan at the bottom of the housing. NOTE: It may be a little difficult to twist on the vented lid. You may need to snap it into place. </li> <li> <p>Temperature, Humidity, and Air Pressure (BME680) Housing</p> Parts BME680 wired with 100mm qwiic wire Radiation Shield Vented Cap Instructions Image Unplug the BME680 sensor from the Qwiic connector, but leave the cord connected to the sensor. Screw the vented cap onto the bottom of the radiation shield. Gently place the temperature, humidity, and air pressure sensor (BME 680) into the radiation shield with the wires sticking out from the top opening. </li> <li> <p>UV Sensor Housing</p> Parts UV sensor wired with 500mm qwiic wireUV capUV tube 1\" PVC T pipeShort length of 1\" PVCThreaded to PVC adaptor Lens coverGlue Instructions Image Unplug the UV sensor from the Qwiic connection port, but leave it wired to the sensor. Position the sensor in the UV cap so that the sensor-side is visible through the cap\u2019s hole. Thread the sensor wires through the UV base and screw the base onto the UV cap. The sensor should feel very secure even when you tug on the wire. Double-check that the sensor-side of the UV sensor is visible from the top of the cap. Thread the UV sensor wire through the top of the PVC joint and out the side side. Then, fit the UV base and cap onto the top of the PVC joint. Attach the shortest PVC pipe to the PVC joint and thread the wire through. Attach the final UV sensor 3D printed piece, which is the threaded attachment piece, to the end of the short PVC pipe (find in Print/Key Accessories). Remove any film covering the screen of the UV lens. Place the lens over the top of the UV sensor housing. If it does not stay in place, consider using hot glue or another adhesive to ensure it remains secured. </li> </ol>"},{"location":"assemble/core/#final-assembly-for-base-unit","title":"Final Assembly for Base Unit","text":"<p>Prior to starting the final assembly, ensure that the UV sensor, air quality sensor, rain gauge, and temperature, humidity, and air pressure sensor are all inside their respective housing and the microcontroller is properly wired. </p> <ol> <li> <p>Rain Gauge Attachment</p> Instructions Image Thread the rain gauge wire through the upper opening of the orb housing (locate the labeled section of the orb housing and make sure it is facing the correct way) and fasten the rain gauge onto the orb housing by twisting it into the threading. Ensure the wires are sticking out from the bottom opeing of the orb. </li> <li> <p>Air Quality Sensor Attachment</p> Instructions Image Position the orb housing so that the \u201cNCAR\u201d label is visible to you. Thread the air quality sensor wires through the right-side opening and of the orb housing and out through the bottom. Now screw on the air quality sensor to secure it. Be sure the vent section is correctly aligned at the bottom. </li> <li> <p>UV Sensor Attachment</p> Instructions Image Thread the UV sensor wire through the opposite side of the orb housing to the air quality sensor, guiding it out through the bottom orb opening. Align the threads of the printed PVC adaptor piece and securely twist the in place. Now you should have your UV sensor sitting in a PVC T-pipe junction and connected to the main orb with another length of PVC. Ensure you have three wires coming out the bottom of the orb: the rain gauge wire, the air quality sensor wire, and the UV sensor wire. </li> <li> <p>Power Cord Attachment</p> Instructions Image Insert the USB-C cord into the UV sensor's PVC pipe and through the bottom of the orb housing. Leave the USB side sticking out of the PVC pipe. </li> <li> <p>Connecting all the wiring</p> Instructions Image Find the rain gauge connector and connect it into the microcontroller (look for white with 4 prongs). Then, connect the USB-C power to the microcontroller right below it. Connect the remaining two wires (air quality sensor and UV sensor) to the Qwiic MultiPort. The side of the port does not matter as long as the connection is tight. Attach the last sensor (BME 680 for temperature, humidity, and air pressure) to the Qwiic connection and keep track of this sensor. Push all the sensors into the orb housing, except for the BME 680 sensor. Leave the BME 680 sensor outside the orb housing temporarily. Secure the radiation shield by place the BME 680 sensor inside the shield and screwing the shield to the bottom of the orb housing. Once you have completed the base assembly, you can test the complete core unit. Take your power source and plug-in the USB cord. You should see multiple green lights from the air quality sensor, radiation shield, and the UV sensor. It may be helpful to dim the lights to see the green glows. You may also be able to see the orb glowing red. </li> </ol>"},{"location":"assemble/ethernet/","title":"Connecting and Powering your Station over Ethernet","text":"<p>Coming soon</p>"},{"location":"assemble/independent/","title":"Assembling Independent Power and Connection for your Station","text":""},{"location":"assemble/independent/#solar-and-power-installation-for-an-independent-weather-station","title":"Solar and Power Installation for an Independent Weather Station","text":"<ol> <li> <p>Setting Up the Solar Panel Mounts</p> Parts 1\u201d PVC pipe 2 PVC mounts with pilot holes 2 Screws Screwdriver Solar panel Instructions Image Pre-drill pilot holes into the outward-facing flat face of the printed PVC mounts if you have not already done so. Then, slide the PVC mounts onto the PVC. Align one screw hole on the solar panel with the pilot hole on the PVC mount and screw it on. Do the same on the other side. Slide the solar panel off of the PVC pipe and set aside. If it is hard to slide off, try loosening the screws. </li> <li> <p>Wiring the Junction Box</p> Parts Wifi modemJunction boxUSB to USB connector USB-C to USC power cord (already wired to microcontroller)Solar panelSolar panel adaptor ScrewdriverBattery Instructions Image Plug your USB wifi modem into your USB to USB adaptor. This will allow the modem fit better into the junction box when the time comes. Set aside. Unscrew the lid to your junction box and the cap of the hole drilled into the junction box. Run the USB end of the USB-C to USB Power cord into the box, feeding it through the cap you unscrewed from the hole in the junction box. If your hole is too small to fit the USB end, you may have to unplug the USB-C end from the microcontroller and feed it through the junction box's hole from the inside. If you do this, wait to reconnect the cord to the microcontroller. until you have finished installing your junction box. Feed the solar panel cord from outside the box, in, going through the cap and the hole. Once inside, plug the end of the solar panel cord into the provided adaptor. Make sure it is a tight fit. Re-screw cap over the hole into the junction box. Plug your hotspot and power cord into the USB ports of your battery. You will need to use the adapter for the power cord. Plug your solar cord into the side of the battery in the appropriate port. Push all contents of your junction box inside so they are below the top of the box. Tuck any excess cord length into the box. Align the junction box lid with the junction box and screw in into place. </li> <li> <p>Setting Up the Junction Box Mounts</p> Parts Wired junction box 1\" PVC pipe 2 PVC mounts with pilot holes 2 Screws Screwdriver Instructions Image Pre-drill pilot holes into the outward-facing flat face of the printed PVC mounts if you have not already done so. Then, slide the PVC mounts onto the PVC. Align one screw hole on the junction box with the pilot hole on the PVC mount and screw it on. Do the same on the other side. Slide the junction box off of the PVC pipe and set aside. If it is hard to slide off, try loosening the screws. </li> <li> <p>Solar and Junction Box Installation</p> Parts Wired junction box with mounts Solar panel with mounts 1\u201d PVC pipe Screwdriver Instructions Image Slide the first mount for the solar panel onto the PVC pipe. Then, slide first mount for the junction box onto the PVC pipe with the junction box resting on the opposite side as the solar panel. The first mount for the junction box should be on the opposite side of the hole where the wiring exits. Now slide on the second solar mount, then the second junction box mount. Feed the USB-C end of the power cable into and through the PVC, coming out on the side of the pipe that will be closest to the core unit once fully assembled. You will need to disconnect the USC-C end of the power cable from the microcontroller to complete this step if you have not done so already. Once you have the solar panel and junction box exactly where you want them, tighten the screws on their mounts. </li> <li> <p>Final Assembly</p> <p>Note: Exactly how you execute your final assembly will depend in part of how you plan to deploy your weather station. Consider if you want to place it on a pole in the ground or attach it to something like a fence. You will want to configure your mounting to match your intended mounting area.</p> Parts PVC pipe with mounted Solar and Juntion BoxPVC pipe Completed Core Weather StationUV addition to Station Instructions Image If you would like your UV sensor to sit if a different position than it did during core unit assembly, reposition it now. Be sure to run the wire for the sensor back into the Qwiic multiport if you adjust the sensor's position. Run the power cord from where it emerged out of the power/solar pipe into the microcontroller in the core weather station Add whatever PVC configuration you need to mount your weather station. In this case, the station will be mounted on a pole into the ground, so a long PVC pipe is added extending downward. <p>Your weather station is complete and ready for deployment!</p> </li> </ol>"},{"location":"assemble/testing/","title":"Testing your Station Before Deployment","text":"<p>Before you place all of your sensors into their various housing, it is important to test whether or not you are receiving data.</p> <p>Here are the steps to do that most effectively:</p> <ol> <li>Configure your wifi modem (if you are using a sim card setup)</li> <li>Plug the modem into your power source and check whether or not you have a signal.</li> <li>Unplug the modem and plug in your microcontroller, without any sensors attached. When connected to power, but not to sensors, it will blink red. </li> <li>Unplug the microcontroller from the power source and attach all your sensors with the appropriate cables. See the Microcontroller, Sensor, and Power Connections table below for details. </li> <li>Make sure all Grove and Qwiic connectors are properly pushed into place as this can cause issues down the line.</li> <li>Without plugging in the modem, connect your microcontroller, with sensors attached, to the power source. If it flashes blue, you're clear to proceed.</li> <li>Unplug the microcontroller, plug in the modem, wait a few seconds for your modem to connect, and plug in your microcontroller.</li> <li>Wait a few minutes and then check your data portal to see if you are receiving data. If so, you are good assemble the station.</li> </ol>"},{"location":"assemble/testing/#microcontroller-sensor-and-power-connections","title":"Microcontroller, Sensor, and Power Connections","text":"Connecting Items Item 1 Image Wire Item 2 Image Details Qwiic MultiPort to BME680 100mm qwiic to qwiic wire Qwiic MultiPort to Air Quality Sensor 200mm qwiic to qwiic wire Qwiic MultiPort to UV Sensor 500mm qwiic to qwiic wire Qwiic Multiport to Microcontroller qwiic to male GPIO wire To integrate Qwiic, attach a GPIO to qwiic jumper on ground, 5v, pin 21, and pin 25 of the microcontroller. That is yellow, blue, red, black from top to bottom on the right. Microcontroller to Rain Gauge grove to female GPIO wire Unscrew the base from the rain gauge. Connect the female GPIO wires as indicated. Red (5v, top left), Black(ground, bottom left), Yellow (Input, 2nd from top left), White (Output, 3rd from bottom left). Microcontroller to Power USB-C to any power source Power Source"},{"location":"assemble/testing/#wiring-diagram","title":"Wiring Diagram","text":""},{"location":"assemble/tutorial/","title":"Video Tutorials","text":"<p>Here, you\u2019ll find step-by-step videos that complement our written and photographic instructions for building your weather station. These tutorials offer a visual guide to help you navigate the assembly process, providing helpful tips and insights along the way. You can build the weather station's core unit and power by watching these videos or following our written instructions in the next pages, or by using both as a resource.</p> <p>Core Station Assembly Tutorial: This video contains instructions to assemble a basic model of the IoT weather station with four sensors: rain gauge, air quality, temperature/pressure/humidity, and UV. We encourage you to explore and iterate on this design once you understand the principle structure. If you would like to add more sensors, any Qwiic compatible, I2C, sensors can be daisy-chained or connected to another splitter if needed.</p> <p>Solar Power and Internet Assembly Tutorial: This video contains instructions to add a solar panel, battery, and wifi modem to bring your station online. You can use alternate power and internet sources as well such as ethernet or connecting to an existing wifi network for cnnectivity.</p>"},{"location":"deploying/field_deployment/","title":"Field Deployment","text":"<p>Properly situating a weather station in the field requires careful consideration for accurate data collection. When selecting a location, keep in mind a few important factors. </p> <ul> <li>Place the weather station away from obstacles like tall trees or buildings that can disrupt airflow and affect wind measurements.</li> <li>Avoid areas with artificial heat sources such as asphalt or concrete, as they can cause higher temperature readings. </li> <li>Also, make sure to position the station on stable ground to prevent measurement errors and ensure equipment stability.</li> <li>Mount the station at a suitable height, typically 1.5 to 2 meters above the ground, for reliable data.</li> </ul> <p></p> <p></p>"},{"location":"deploying/home_deployment/","title":"Urban Deployment","text":"<p>When deploying a weather station at a home, school, or in an otherwise developed area, there are a few important considerations to keep in mind. </p> <ul> <li>Choose a location that is free from immediate obstructions such as nearby trees or tall structures that could affect other weather measurements. </li> <li>Mount the station at a suitable height, typically 1.5 to 2 meters above the ground, for reliable data.</li> <li>Ensure that the station is not in direct contact with the building or any heat-emitting sources that could impact temperature readings.</li> <li>It is recommended to position the weather station in an area that receives adequate sunlight and is representative of the general microclimate of your surroundings. Avoid placing the station in shaded areas or near reflective surfaces that could distort solar radiation measurements. </li> <li>Additionally, make sure the station is securely mounted, taking into account factors like stability and ease of access for maintenance.</li> <li>Regular checks and comparisons with nearby official weather sources can help ensure the accuracy of the collected data.</li> </ul> <p></p> <p></p>"},{"location":"first-steps/introduction/","title":"Introduction","text":"<p>Aliquip amet laboris occaecat fugiat minim Lorem occaecat laboris pariatur anim officia. Laborum pariatur ad deserunt ad aute aliquip ullamco mollit adipisicing non mollit. Id et tempor et ad non officia et veniam. Culpa quis magna eu ex labore excepteur elit quis. Magna id nulla ullamco laborum eu cupidatat aliquip.</p>"},{"location":"getting-started/computing/","title":"Computing","text":"<p>A driving principle of OpenIoTwx is accessibility. Because of this we have kept requirements low.</p> <p>Required: Operating computer (because of our love for open source software, we suggest Linux, Mac and Windows work as well), a monitor, a keyboard, and a mouse.  </p> <p>Additionally, for the preliminary downloads, applications, etc, you will need a moderately stable internet connection OR a flashdrive containing everything within the software  and the core installation pages.</p>"},{"location":"getting-started/connection/","title":"Power and Internet connection","text":""},{"location":"getting-started/connection/#power-options","title":"Power Options","text":"<p>To power your device, you have two primary options - a solar panel and battery or Power over Ethernet (PoE).</p> <p>For a solar panel and battery, we are fans of Voltaic because of their fairly high quality to price.  That being said, there are many companies out there and if you can find a good deal, take it. The power source is only critical insofar as it exists, and the specific method shouldn't change anything.</p> <p>For PoE we suggest integrating via an m5 microcontroller integration. What PoE does is both data transfer as well as internet, so it covers both realms.</p>"},{"location":"getting-started/connection/#internet-options","title":"Internet Options","text":"<p>The methodology we have in use for remote stations is three pronged.</p> <ol> <li>If there is service via a cellular network i.e T-mobile, Verizon, AT&amp;T, etc. purchase a sim card with a long lifespan and a relatively small amount of data (we use 200mb for a year).Additionally purchase a USB modem. With these two options you can run a miniaturized wireless network that integrates perfectly with the ESP32 microcontroller and the MQTTdata protocol.</li> <li>If there isn't cell service and funds are tight you can either store data locally and retrieve it - time-consuming</li> <li>If there isn't cell service and there are available monies, set up a satellite network - significantly more expensive but easier.</li> </ol>"},{"location":"getting-started/materials/","title":"Materials","text":"<p>Within this page you can see all of the required materials for building the base unit, as  well as the materials for adding sensors and other 'accessory' nodes. If you already have some of  these pieces, for example, a 3d printer, you don't need to factor that into the cost. We have  included every sensor that we currently support for the station within this list. If you have other  sensors you wish to include, we would be thrilled for you to modify the codebase and send us a pull request  or send a comment to us via our Contribution portal.</p> <p>The station can be powered and connected via ethernet or independently. The materials needed will be different depending on which configuration you use. Pay attention to the headings on the table below to make sure the materials you purchase are appropriate for the configuration that meets your needs. If you need more information to decide which configuration is best for your specific circumstance, go to the Determining power &amp; internet needs page.</p>"},{"location":"getting-started/materials/#printing-gear","title":"Printing Gear","text":"<p>Only one roll of filament is required.</p> Area Component Price Per Unit Number of Units Total Price Source Printing Ender 3 S1 $349.00 1 $349.00 (Amazon) Printing PLA+ Filament $20.99 1 $20.99 (Amazon) Printing Tough PLA $24.99 1 $24.99 (Amazon)"},{"location":"getting-started/materials/#base-station-with-independent-comms-and-power","title":"Base Station with Independent Comms and Power","text":"Area Component Price Per Unit Number of Units Total Price Source Microcontroller M5 atomlite $7.50 1 $7.50 (M5) Cables qwiic to grove cable $1.60 1 $1.60 (sparkfun) Cables qwiic adapter $1.60 1 $1.60 (sparkfun) Cables qwiic multiport $2.10 1 $2.10 (sparkfun) Cables qwiic cable 500mm $2.10 1 $2.10 (sparkfun) Cables qwiic cable 200mm $1.60 2 $3.20 (sparkfun) Cables qwiic cable 100mm $1.60 1 $1.60 (sparkfun) Cables Grove to GPIO $3.50 1 $3.50 (Seeed studio) Cables Qwiic to GPIO $1.50 1 $1.50 (sparkfun) Cables usbC=&gt;usbA adapter (2pk) $7.99 1 $7.99 (amazon) Cables usbC=&gt;usbA 10ft cable (5pk) $13.59 1 $13.59 (amazon) Sensors adafruit bme680 $18.95 1 $18.95 (mouser) Sensors RG-15 Rain Gauge $99.00 1 $99.00 (mouser) Sensors adafruit pm2.5 $44.95 1 $44.95 (adafruit) Sensors adafruit ltr390 $4.95 1 $4.95 (mouser) Power voltaic v75 (20mah) $79.00 1 $79.00 (voltaic) Power voltaic 20w solar panel $99.00 1 $99.00 (voltaic) Power Junction Box $15.93 1 $15.93 Home Depot Communications KuWfi 4G Hotspot $36.99 1 $36.99 (Amazon) Communications Redpocket 1 yr SIM (TMOBILE ONLY) $30.00 1 $30.00 (ebay)"},{"location":"getting-started/materials/#base-station-using-poe","title":"Base Station using PoE","text":"Area Component Price Per Unit Number of Units Total Price Source PoE PoE Converter $39.90 1 $39.90 (M5) Cables qwiic to grove cable $1.60 1 $1.60 (sparkfun) Cables qwiic adapter $1.60 1 $1.60 (sparkfun) Cables qwiic multiport $2.10 1 $2.10 (sparkfun) Cables qwiic cable 500mm $2.10 1 $2.10 (sparkfun) Cables qwiic cable 200mm $1.60 2 $3.20 (sparkfun) Cables qwiic cable 100mm $1.60 1 $1.60 (sparkfun) Cables Grove to GPIO $3.50 1 $3.50 (Seeed studio) Cables Qwiic to GPIO $1.50 1 $1.50 (sparkfun) Cables usbC=&gt;usbA adapter (2pk) $7.99 1 $7.99 (amazon) Cables usbC=&gt;usbA 10ft cable (5pk) $13.59 1 $13.59 (amazon) Sensors adafruit bme680 $18.95 1 $18.95 (mouser) Sensors RG-15 Rain Gauge $99.00 1 $99.00 (mouser) Sensors adafruit pm2.5 $44.95 1 $44.95 (adafruit) Sensors adafruit ltr390 $4.95 1 $4.95 (mouser)"},{"location":"getting-started/materials/#optional-materials","title":"Optional Materials","text":"<p>A note on optional materials. If you are hosting in a sunny place and running your station with a relatively low power configuration, you can use a smaller solar panel and battery (below).  Additionally, for better print quality, a PEI plate can be quite nice, although not necessary by any means.</p> Area Component Price Per Unit Number of Units Total Price Source Power voltaic 10w solar panel $65.00 1 $65.00 (voltaic) Power voltaic v25 (6000mah) $39.00 1 $39.00 (voltaic) Printing PEI Magnetic Flexible Heated Bed Plate $25.99 1 $25.99 Amazon"},{"location":"getting-started/software/","title":"Software","text":"<p>There are two softwares that will be necessary for all users. Arduino - to load, or flash, data onto the microcontroller, and a printing software. The printing software our team uses is Ultimaker Cura, if the printer you buy is incompatible with Cura, use whatever specific printing software your machine suggests. If you choose to use a different microcontroller system, you may also need a different flashing environment, but that is outside of the scope of this guide.</p> <p>First, download Arduino 1.8.18. This is a legacy release but in order to use the correct data  format, SPIFFS, you must use Arduino 1.8. SPIFFS has not yet been implemented in the 2.x version of Arduino. If this is changed in Arduino IDE,  IoTWX will adapt accordingly.</p> <p>Additionally you will need Ultimaker Cura (or a different 3d printing software) to work with and edit the 3d files.  You will need to edit them if you have special circumstances for  your station site or you are using a different printer than the one we suggest.  Our gcode files (instructions for the 3d printing) are calibrated with our printer, the Ender 3 S1, and are too fickle to be worth sharing.</p>"},{"location":"getting-started/software/#download-pages","title":"Download pages:","text":"<p>Arduino IDE (Scroll down until 'Legacy IDE')</p> <p>Ultimaker Cura</p>"},{"location":"installation/core_install/","title":"Flashing Microcontrollers","text":"<p>Each station node is build with a microcontroller as its brain. Each microcontroller is connected to one or more sensors either directly or by hubs -- Grove hubs or Qwiic hubs. </p> <p>openIotWx is designed to be used with the m5Stack Atom Lite ESP32-Pico based microcontroller, but it is possible to connect other microcontroller devices with a few modifications to the code. Technically any ESP32 chip with enough memory would work. That being said, the M5 atom lite is quite cheap and easy to purchase, and we thus suggest that one.</p>"},{"location":"installation/core_install/#iotwx-library-installation","title":"IoTwx library installation","text":"<p>Before compiling the microcode onto the Arduino, you will also need to install the IoTwx library which controls the communications and initialization functions of the station.</p> <p>IoTwx Library</p> <p>The library can found at the following repository. It should be installed in your <code>Arduino/libraries</code> directory and once installed, you may use it by the <code>#include \"IoTwx.h\"</code> directive.</p> <ul> <li>https://github.com/NCAR/esp32-atomlite-arduino-iotwx</li> </ul>"},{"location":"installation/core_install/#preparing-your-system","title":"Preparing Your System","text":"<p>First, download Arduino 1.8 - this is an old release but in order to use the correct data format, SPIFFS, you must use Arduino 1.8. Download Arduino 1.8.19 following this link. If this is changed in Arduino IDE, IoTWX will adapt accordingly. </p> <p>Next, Underneath the boards manager, download the Espressif add the following URL to the list of Boards Manager list so that \"ESP32 Dev\" appears via File-&gt;Preferences-&gt;Additional Boards Manager URLs https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</p> <p>There are a few other steps you will need to complete:</p> <p>Next, download the following packages. The easiest way to do this is to follow the github links and click download as zip.  From there, in the \u2018manage libraries\u2019 functionality of Arduino (under sketch), you can add a library from a .ZIP. Do this with all packages that aren't native in the Arduino IDE library set.</p> <ul> <li>install the required ESP32 Pico / M5 Stack Atom lite boards; a comprehensive instruction set is here</li> <li>install the arduino-esp32fs-plugin that will allow SPIFFS file uploads to ESP32 boards</li> <li>install the following libraries through the Arduino IDE or through the zip link:<ul> <li>MQTT library from 256dpi https://github.com/256dpi/arduino-mqtt</li> <li>ArduinoJson library https://github.com/bblanchon/ArduinoJson</li> <li>FastLED library https://github.com/FastLED/FastLED</li> <li>NTPClient library https://github.com/arduino-libraries/NTPClient</li> <li>Adafruit BME680 https://github.com/adafruit/Adafruit_BME680</li> <li>Adafruit LTR390 https://github.com/adafruit/Adafruit_LTR390</li> <li>RG-15 Rain Gauge https://rainsensors.com/docs/rg-guides/rg-arduino/hydreon-arduino-library/</li> <li>ESP Software Serial https://github.com/plerup/espsoftwareserial</li> <li>Adafruit Air Quality https://github.com/adafruit/Adafruit_PM25AQI</li> <li>Adafruit SHT4x https://github.com/adafruit/Adafruit_SHT4X</li> <li>Wifi (Native in library)</li> <li>Adafruit_Sensor https://github.com/adafruit/Adafruit_Sensor</li> <li>I2C control https://github.com/Sensirion/arduino-i2c-scd4x</li> <li>DFRobot Ozone Sensor https://github.com/DFRobot/DFRobot_OzoneSensor</li> <li>Sensirion Core https://github.com/Sensirion/arduino-core</li> <li>M5 Ethernet https://github.com/m5stack/M5-Ethernet</li> <li>The Custom IoTwx library</li> </ul> </li> </ul> <p>If ESP32 isn't appearing underneath the board manager, download it (see previous steps).  Once ESP32 is downloaded, select it within board manager toolbar setting. When selecting what board to use, under ESP32 Arduino, choose 'ESP32 Dev Module'</p> <p>This will add a number of options underneath your tools section. Select:</p> <ul> <li>Upload speed 115200</li> <li>CPU Frequency: 240</li> <li>Flash Frequency:80</li> <li>Flash mode: QIO</li> <li>Flash size: 4 MB</li> <li>Partition scheme: Huge APP</li> <li>PSram: disabled</li> </ul> <p>Leave the rest as default if that setting was not already the default mode</p>"},{"location":"installation/core_install/#cloning-the-file-structure","title":"Cloning the file structure","text":"<p>Next, clone the Github respository into Arduino.  Alternatively, click this link and download the zip of the file structure.  There should be code, a data directory, and within the data directory, a config.json</p>"},{"location":"installation/core_install/#editing-configuration-files","title":"Editing Configuration Files","text":"<p>Your microcontroller must contain a user-customized configuration file to operate.  The file contains information about Network Connection (WiFi), MQTT (the way your station will send data) connections and some other relevant information.</p> <p>The microntroller uses an ESP32 SPIFFS filesystem to store the configuration.  In the folder that you will flash onto your mictrocontroller using the sketch data upload interface, you will find a <code>/data</code> folder which contains a <code>config.json</code> file. This config allows for identification and choice with upload destination.</p> <p>If the data folder isn't appearing, don't worry. Just create a data folder in the Arduino sketch folder. Inside of that, put the json and contents in and it should work.</p>"},{"location":"installation/core_install/#understanding-the-configjson-file","title":"Understanding the <code>config.json</code> file","text":"<p>A model config file looks something like this:</p> <pre><code>{    \n    \"iotwx_local_config\":\"1\",\n    \"iotwx_id\":\"m5atom/esp32/aaffbbcc\",\n    \"iotwx_mq_ip\":\"\",\n    \"iotwx_mq_port\":\"1883\",\n    \"iotwx_publish_interval\":\"1\",\n    \"iotwx_reset_interval\":\"360\",\n    \"iotwx_sensor\":\"grove/i2c\",\n    \"iotwx_timezone\":\"21600\",\n    \"iotwx_wifi_pwd\":\"PASSWORD\",\n    \"iotwx_wifi_ssid\":\"SSID\",\n    \"iotwx_topic\":\"measurements/iotwx\",\n    \"iotwx_max_frequency\":\"240\"\n}\n</code></pre> <p>The details of each key are described below.</p> key value / description <code>iotwx_local_config</code> always set to \"1\" <code>iotwx_id</code> contains a unique identifier for you station as a whole.  This identifier is also used in the data portal. (e.g. <code>\"iotwx-co-bb83\"</code>) <code>iotwx_mq_ip</code> the ip address (e.g. <code>\"172.88.0.13\"</code>) of the MQTT broker you will be using.  At the moment only one such broker is allowed. You may use the FQDN (<code>\"mymqttsite.wx\"</code>) but the IP address uses less power by reducing the time WiFi is on to do DNS lookups. <code>iotwx_mq_port</code> the port number of the broker, which is typically <code>\"1883\"</code> for non-SSL and <code>\"8883\"</code> for SSL. <code>iotwx_publish_interval</code> the interval you wish your station to transmit in minutes. Note: The stations only transmit when there is data to transmit. <code>iotwx_reset_interval</code> Minutes between system resets.  The nodes are designed to reset every 6 hours or twice daily.  Reset is instantaneous and the system is restored to full functionality in 90 seconds after the Bluetooth acquisition phase. (e.g. <code>\"1\"</code> for 1 minute) <code>iotwx_sensor</code> the sensor string for the node and may vary based on the node.  Typically do not change this value from what is contained in the default for your station. <code>iotwx_timezone</code> the GMT offset in seconds of the station timezone. (e.g. <code>\"21600\"</code>) <code>iotwx_wifi_pwd</code> and <code>iotwx_wifi_ssid</code> are the corresponding wifi password and ssid of the network your node will connect to.  Note, it is not necessary (but would be unusual) for all nodes to connect to the same WiFi network. (e.g. <code>\"your_wifi\"</code> and <code>\"your_password\"</code>) <code>iotwx_topic</code> the MQTT topic your node will publish to.  It is not necessary for all nodes to publish to the same topic, but if you are using the CHORDS MQTT Orchestrator (GitHub - NCAR/chords-mqtt-orchestrator), then you will need to adjust it accordingly to route your messages where they belong.  The current default is <code>\"iotwx/net\"</code>. <code>iotwx_max_frequency</code> is the CPU frequency (in Mhz) you wish your node to run  on.  The m5Stack Atom Lite can be run from 40-240Mhz. Varying the value has power-saving benefits - up to 50% reduction in total power consumption."},{"location":"installation/core_install/#flashing-onto-the-microcontroller","title":"Flashing onto the microcontroller","text":"<p>Once you have everything set up within Arduino IDE, compile everything you just did. If that works with no errors, plug the microcontroller into your computer, and flash onto it. Additionally, make sure to do an ESP32 Sketch Data Upload (under Tools). This will upload your config.json. You don't need to reflash the whole microcontroller if you need to update the config, just redo this step.</p>"},{"location":"installation/core_install/#configuring-data-upload","title":"Configuring data upload","text":"<p>While this isn't necessarily under the direct purview of openIoTwx, and is more covered by whatever orchestrator and other clients you decide to use, it is worth noting that your topic in the config needs to then be matched and set up within your orchestrator and then in your data collection / visualization client (CHORDS for us).</p> <p>You can learn more about CHORDS at http://chordsrt.com.</p>"},{"location":"introduction/community/","title":"Community","text":"<p>openIoTwx is made up of a diverse community, all contributing to build,  customize, and deploy weather stations. A core belief of ours is that these stations should be accessible for all researchers no matter the size of the institution,  the scale of the planned work, the discipline of the research, or the  background of the user. </p> <p>All are welcome to help with this project, no degree in computer science or engineering needed. Our community includes  students, faculty, and staff from community colleges and universities, citizen  scientists, and other interested community members.</p> <p>Historically, the same communities that aren\u2019t represented in climate and  geosciences are the ones that are least resilient and most at risk of  significant impact from climate change. </p> <p>Furthermore, such communities are often over-represented when looking at  so-called \"data deserts\" and gaps in observation networks. These communities  are at continued risk of the worst outcomes of climate change, and communities  in data deserts are often under-represented in climate change science and  policy discussions, STEM fields, and in the ongoing open source IoT revolution. Our community will contribute to the development of a democratized, diverse,  and globally competitive STEM workforce, providing opportunities to immediately translate interest into climate change resiliency, data analysis and policy management.</p>"},{"location":"introduction/ideals/","title":"Ideals","text":"<p>The \"Internet of Things\" (IoT) revolution is about the world of sensors, software, and electronics. It allows for ubiquitous, low-cost, and high quality measurements of many things, including our Earth system. Due to low cost-barriers, these sensing systems are now broadly accessible to many communities. We hope that openIoTwx can continue piquing new interest in measurements and data relating to the all aspects of our environment around us. We advise all members of our community to review and regularly reflect on the core ideals outlined here.</p> <p>The goals and core ideals of the openIoTwx project is to advance low cost IoT based geoscience observational projects via four objectives that align with and build upon the National Science Foundation's (NSF) investments in the EarthCube Community, ACCESS/Jetstream, 3D printed weather stations (aka \"openIoTWx\") and future needs:</p> <p>(1) create an open, diverse, community-driven and community-managed ecosystem to empower fledgling open source sensor projects for open environmental sensing.</p> <p>(2) implement an efficient, scalable, and simplified open project submission and contribution framework to provide equitable access across disciplines, stakeholders, institutions, and demographics to grow a community managed suite of open source IoT observational sensor network projects;</p> <p>(3) building upon NSF\u2019s Cloud-Hosted Real-time Data Services for the Geosciences (CHORDS) and other components, develop a robust, decentralized, and flexible community software contribution platform to bring the open source project development and design cycle into a new collaborative and cooperative environment to spur sustainable community growth; </p> <p>(4) provide cyber-infrastructure (CI) integration through the ACCESS innovation pilot program to manage dataflows, analysis, address artificial intelligence and machine learning of earth science time series streams, creating open source community deployments that are accessible while recognizing and honoring data sovereignty aspects of our communities.</p>"},{"location":"introduction/ideals/#opensource-is-at-our-core","title":"Opensource is at our core","text":"<p>Our community holds the ideals of open source technology very close (for more see https://opensource.org). openIoTwx broadly promotes the MIT open source license and is accessible to all for non-commercial use. Open source is an important ideal for our community because it facilitates community engagement, provides transparency that builds trust and encourages sharing of data, code, hardware  community earth system science data and ideas.</p>"},{"location":"introduction/ideals/#fair-and-care","title":"FAIR and CARE","text":"<p>We are committed to the Findability, Accessibility, Interoperability, and Reuse (FAIR) of all digital assets (see https://www.go-fair.org/fair-principles/) needed to design, modify, build, deploy, analyze and archive the openIoTwx station. The FAIR principle as defined by GO-FAIR.ORG is a core value that will help make this community open and accessible to all.</p> <p>We balance adherence to FAIR principles with CARE (https://www.gida-global.org/care) or Collective Benefit, Authority to Control, Responsibility, and Ethics. This is important for our community members from tribal communities and other marginalized groups. Please review the CARE principle summary as linked above.</p>"},{"location":"introduction/ideals/#fpic","title":"FPIC","text":"<p>Free Prior and Informed Consent (FPIC) is a specific right that pertains to indigenous peoples and is recognised in the United Nations Declaration on the Rights of Indigenous Peoples (UNDRIP). It allows them to give or withhold consent to a project that may affect them or their territories. This is another core ideal of the openIoTwx community and should also be reviewed. (for more see https://www.fao.org/indigenous-peoples/our-pillars/fpic/en/)</p>"},{"location":"introduction/platform/","title":"Platform","text":"<p>openIoTwx is an open source community committed to increasing access to weather observation hardware, software, and data. This is achieved through our portable,  modular, and affordable platform. openIoTwx can be installed with up to 7  sensors or \"nodes.\" These nodes include, but are not limited to: temperature, relative  humidity, pressure, volatile organic compounds (VOCs), digital rain sensors, sky  cameras, and sonic anemometers (Devices that measure wind speed). The platform is  small enough to mount anywhere using low cost commercial off-the-shelf materials and  3D printed parts.</p> <p>Any of these nodes can be attached to the body using universal one inch screw-in  connectors. This approach allows for any 1\" PVC pipe or other threaded connector to be  used as a base for the station. This specification was chosen due to how commonly  available it is to find components that fit. The body of the station has threaded  connectors. Depending on the housing used, there are between three and five ports. </p> <p>Users are provided with a starter set of screw in adaptors for an initial  set of sensors such as the RG15 digital rain sensor,  air quality monitor, and radiation shields. We also provide screw-in connectors with a  cap so that users can cap off connectors not in use and deploy. This prevents water and  dust from getting into the electronics. Should a user want to attach a new sensor, they  can modify the 3D design files (provided in the print section) for whatever their  needs demand.</p>"}]}